<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yunting.login.mapper.LocationMapper">
    <resultMap id="BaseResultMap" type="com.yunting.login.entity.Location">
        <id column="locate_id" property="locateId" jdbcType="BIGINT"/>
        <id column="player_id" property="playerId" jdbcType="BIGINT"/>
        <result column="location" property="location" jdbcType="VARCHAR"/>
        <result column="record_time" property="recordTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <insert id="insertLocation">
        INSERT INTO ${dbName}.location(player_id, location,record_time)VALUES
        (#{playerId},#{location},#{recordTime})
        <selectKey resultType="long" keyProperty="locateId" order="AFTER" keyColumn="locate_id">
            select @@identity;
        </selectKey>
    </insert>

    <update id="updateLocation">
        update ${dbName}.location
        set location=#{position},
            record_time=#{recordTime}
        where player_id = #{playerId}
    </update>

    <select id="getLocationInfoByPlayerID" resultType="com.yunting.login.entity.Location">
        select locate_id, player_id, location,record_time
        from ${dbName}.location
        where player_id = #{playerId}
        <if test="recordTime != null">
            and date(record_time) =#{recordTime}
        </if>
        order by locate_id desc
    </select>

    <select id="getLastLocationByPlayerId" resultType="com.yunting.login.entity.Location">
        select locate_id, player_id, location, record_time
        from ${dbName}.location
        where player_id = #{playerId}
          and date(record_time) = #{today}
        order by locate_id desc
        limit 1
    </select>

    <insert id="insertExceptionRecord">
        INSERT INTO ${dbName}.exception_recordlsit(player_id, wx_nick_name, game_id, oaid, android_id,
                                                   device_type, device_detail,
                                                   except_type, except_info, exception_time)
        VALUES (#{playerId}, #{wxNickName}, #{gameId},
                #{oaid}, #{androidId}, #{deviceType}, #{deviceDetail},
                #{exceptType}, #{exceptInfo}, #{exceptionTime})
    </insert>

    <select id="getWithdrawRecordByPlayerIdAndPackageName"
            resultType="com.yunting.login.dto.WithdrawVo">
        select withdraw_status, withdraw_money, withdraw_time, return_money
        from behind_manage.withdraw_record
        where player_id = #{playerId}
          and package_name = #{packageName}
        order by withdraw_record_id desc
    </select>
</mapper>